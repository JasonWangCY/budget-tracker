// <auto-generated />
using System;
using BudgetTracker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetTracker.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BudgetTrackerDbContext))]
    partial class BudgetTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.Budget", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasColumnType("text")
                        .HasColumnName("budget_id");

                    b.Property<string>("BudgetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("budget_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_time");

                    b.Property<decimal>("SpendingLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("spending_limit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("BudgetId")
                        .HasName("pk_budgets");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_budgets_user_id");

                    b.ToTable("budgets", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.BudgetCategory", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasColumnType("text")
                        .HasColumnName("budget_id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.HasKey("BudgetId", "CategoryId")
                        .HasName("pk_budget_category");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_budget_category_category_id");

                    b.ToTable("budget_category", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.BudgetTransactionType", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasColumnType("text")
                        .HasColumnName("budget_id");

                    b.Property<string>("TransactionTypeId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_type_id");

                    b.HasKey("BudgetId", "TransactionTypeId")
                        .HasName("pk_budget_transaction_type");

                    b.HasIndex("TransactionTypeId")
                        .HasDatabaseName("ix_budget_transaction_type_transaction_type_id");

                    b.ToTable("budget_transaction_type", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefaultCategory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_category");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("CategoryId")
                        .HasName("pk_categories");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_categories_user_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.TransactionAggregate.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_time");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("transaction_amount");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionTypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_type_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("pk_transactions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_transactions_category_id");

                    b.HasIndex("TransactionTypeId")
                        .HasDatabaseName("ix_transactions_transaction_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transactions_user_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.TransactionAggregate.TransactionType", b =>
                {
                    b.Property<string>("TransactionTypeId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefaultType")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_type");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_time");

                    b.Property<int>("Sign")
                        .HasColumnType("integer")
                        .HasColumnName("sign");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction_type_name");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionTypeId")
                        .HasName("pk_transaction_types");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transaction_types_user_id");

                    b.ToTable("transaction_types", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("current_balance");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("UseDarkMode")
                        .HasColumnType("boolean")
                        .HasColumnName("use_dark_mode");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.Budget", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budgets_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.BudgetCategory", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Entities.BudgetAggregate.Budget", "Budget")
                        .WithMany("BudgetCategories")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_category_budgets_budget_id");

                    b.HasOne("BudgetTracker.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_category_categories_category_id");

                    b.Navigation("Budget");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.BudgetTransactionType", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Entities.BudgetAggregate.Budget", "Budget")
                        .WithMany("BudgetTransactionTypes")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_transaction_type_budgets_budget_id");

                    b.HasOne("BudgetTracker.Domain.Entities.TransactionAggregate.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_transaction_type_transaction_types_transaction_type_");

                    b.Navigation("Budget");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.Category", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_categories_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.TransactionAggregate.Transaction", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_categories_category_id");

                    b.HasOne("BudgetTracker.Domain.Entities.TransactionAggregate.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_transaction_types_transaction_type_id");

                    b.HasOne("BudgetTracker.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_users_user_id");

                    b.Navigation("Category");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.TransactionAggregate.TransactionType", b =>
                {
                    b.HasOne("BudgetTracker.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_transaction_types_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.BudgetAggregate.Budget", b =>
                {
                    b.Navigation("BudgetCategories");

                    b.Navigation("BudgetTransactionTypes");
                });

            modelBuilder.Entity("BudgetTracker.Domain.Entities.TransactionAggregate.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
